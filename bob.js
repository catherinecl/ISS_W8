const crypto = require("crypto");

const bobPublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw5PTp806XXhrI08Fpqpp
qaT/zJbJ+EOx83FWq9J97pTFDwsyk9GyBDW87OJOmEqBeAowOoVBwbBG0k1XWBLP
LLqFxnqNwXnOKPCjPw2qnGPt5IvidiCPr1nv0lYPXiuccCEOgNQw5XGqfjbx01Wh
gNgdpR7ktBDjQC0qNwgeBQLQx0sqkA/kXKKzuF9ErtyFE//GJwLATb12erFsjwA+
uXjEMqYlqqI9aS4hy1pjDIVg//BMB4ifYS80wAATz1PPDvw8jEbCB23OfeTn2fDp
C/uB24xQSK3Er4r1otfeuoXCFBUhdGB/DfFB1WNvjs59MfjPoYEup/wphmHm53Qj
uwIDAQAB
-----END PUBLIC KEY-----`;
const bobPublicKey = crypto.createPublicKey(bobPublicKeyPem);

const bobPrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDDk9OnzTpdeGsj
TwWmqmmppP/Mlsn4Q7HzcVar0n3ulMUPCzKT0bIENbzs4k6YSoF4CjA6hUHBsEbS
TVdYEs8suoXGeo3Bec4o8KM/DaqcY+3ki+J2II+vWe/SVg9eK5xwIQ6A1DDlcap+
NvHTVaGA2B2lHuS0EONALSo3CB4FAtDHSyqQD+RcorO4X0Su3IUT/8YnAsBNvXZ6
sWyPAD65eMQypiWqoj1pLiHLWmMMhWD/8EwHiJ9hLzTAABPPU88O/DyMRsIHbc59
5OfZ8OkL+4HbjFBIrcSvivWi1966hcIUFSF0YH8N8UHVY2+Ozn0x+M+hgS6n/CmG
YebndCO7AgMBAAECggEABJ/Hx2NsdG4LBdBTmWeRwp8EkN8y/KjSj8/aJ8Eer/fG
FxiZQonH7J5LYsQeZt3P5OUOP2P3t8h9WTvkRKEx2fVAgaBGK/YC1UMuOcPLbf2Y
wnzAoe3YhwOHn0gxTz9fWtZKuSAcEwJlrTNwG1hh2/XbGcqBdvTdyc2OT0e8U3EE
DeIvNJZhcEnxrlAxvao07RLQddNaFEYognp1k7oLMolA3nEkABV+Qb2lx9wd13rQ
VZTc3bPNhK4mjwO74DuArBSVBm7BYKUtE43gYFfpV91zZabodPqFBHBg6bcp1I/n
0f9XsMvIuacwe87Vn1cZfHWnWveZzZPHqXGGwdQYqQKBgQD7IQaepDLnYuC/NRmK
IkepzqWW6hUX7uToSAq/4kiBUXNCY8Hnlo0q0pk6ImzIGQ7ps5Zx+NOemSJ1x5Ey
wNCt36lOQ1KJ2Hof4/ozgtXYCL2QDYizLBGEgsF+18CqzF8OsTrBxkWUdvcIujzJ
q65pSQWl6eJU6v33WiG1ijrUfwKBgQDHXvYQof64zDn0v58SwITPxdfOHAey2W25
qkT/xYTHvHu5G9pD8gugFXiuOuw6gglcfqWrwcghlCrIo3LT2GY7uyoE4/V6FIfn
1c0DORXU2gQ7z7PpVis2MxPvDU1Gq68cdaAfd9QcZOOOymEhpTv1KpyJHaRFW3uI
6mVS2ipixQKBgHEoqY30mUdwY6tlJvP6jGY0yqLdKdIWAKm2RLnAIkG7TP9+ahKL
4WKJcSgj+PaVbAXcuY7zu4+8my2NVp0TCzU+ElFEvr2EgUs7dDOf4fItxhVSM+Xg
lqgqLzyTxapw2uiI7dwBFrtWe+w/10JcjQO+NsBTSnxPQ08hGw1tkyLLAoGBAMBD
uqaFoqDSCl4V4TDzSeEY2Snh7Ca0+dTf+BR0hb0c7m+wBYgaxs1Fh5D2L9OojaCO
XfRKN1byjWPaBCV5/fVCZJ48vAFUBVA05bVi+sO+z/BiOA0g1SE6ltGlEU3CyWd3
o8hVBc+wF6cfUhZhQ3YF9tlgJYfhVjvOV5JT5CZFAoGBAON9UpTPfiC0YEbi9eRM
HBn1Yk71bmpTA+0YIWHeFU76rRXh491HwnnfmYz7BRgodHi9FJCREaY6WftOQxhk
U1WJCOGALVBwNhvR7DUnE33ht5rubSLkx6ARnb8wyzUT3AwN3dGSXPx0b8aBOXdt
qA/Cg6ufFtLw3qBkzImZPjth
-----END PRIVATE KEY-----`;
const bobPrivateKey = crypto.createPrivateKey(bobPrivateKeyPem);

const alicePublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmmUHUoJVGeXVYra9n1gW
44uBvE5KTr8uA6uybtlCzHYfVWgnsKaawvlwACmtQXhPUCmFQB0j8WiWRhtlT1PQ
vir9B43S1DjcyKEQIksVSHlUfv+kXowoQHVrOGS+Up8ixEA7OjZxohZopJ4hsXfK
e0WQNZ8ovog2VvNx4Lw+jXxLku46qiZhxhtbgJqnxzVvD0yvj0iYGOa6XMZduNTk
jY0iSbrDS26Eocy/mbJVEwAHruFY+PQUF4IKP7vKFpfKRdQZ0183KwxQISy+EJPs
qZmOyu2bk09B0GS+S/Fh2U1x8pNaj2IcrcU6AzoaX3meTvjjATKCHP3iTQWF8bBM
uQIDAQAB
-----END PUBLIC KEY-----`;
const alicePublicKey = crypto.createPublicKey(alicePublicKeyPem);

const ciphertextHex = "89881ac5e5546c1d6092c303520cbc7334eafd34aeb727ba9aeecf52e356afd3a78be14c85197931b28d02d6d3273d119c2eb4e2373429e8a003d65ac201fd3f468e5e35d311a97990a61a24829ce161f43ab1b41f39bdbab5244bf4f29e3ec8611f8a568baa5382ffb0017314b62cc9acd13e80d803489b0a286c9cf26ea7d3f960bb5abac8cfb9d63916003a323f1273af4511bf73857b59bbab1c5768df2fb3fb77debe56693b5276595a2b583ff1bbc13d209622097df1308f5b766d02a1ccbba20320f117d52b2bf8471493be4f38dcc3897517bdd4c2bdaf5d5ff22a3804d8602c79cb9844e41e6f42ecc836526484cde21933776f382f8b72d1ca673c";
const ciphertext = Buffer.from(ciphertextHex, "hex");

const recoveredPlaintext = crypto.privateDecrypt(bobPrivateKey, ciphertext);
console.log("Recovered Plaintext:", recoveredPlaintext.toString("utf8"));

const signatureHex = "713c52a4d9a3401c01971b4f7a406f6d33338b994e35393d7f41c7daa6a00374240af9cb54202b7108dfbc0e932f3b2cdf520105fe2125b958a620d95d295b3d1c5af038fe45968e71d7c396957c8b0a255806e1e315bc070224e01e7d836b1e51a722472dd2815970314419c2454686d8f7f53f7e4e04fe460d435d4fc2af0b3304e3320b059b1c72858486dc6d4d9d876d3562f2844d7b2d57eaffeff0b88597a37d1c6fe9aa69b2c29b968b97164026c08030059f9d81ec714efa5c3677880755a451e0d313c3f44e5873d12e258d54ffd48aba5da3e448066ac709053142faf9356d65ef64f83d7a7798b91bcac46fc4d8fe8562edf33bb7855f6e433916";
const signature = Buffer.from(signatureHex, "hex");

const isValid = crypto.verify("sha256", recoveredPlaintext, alicePublicKey, signature);
console.log("RSA signature verified:", isValid);